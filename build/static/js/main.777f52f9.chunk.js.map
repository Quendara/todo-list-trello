{"version":3,"sources":["Board.js","messageService.js","HomePage.js","MessageReciever.js","csvToJson.js","index.js"],"names":["Board","probs","getList","id","state","lists","items","onDragEnd","result","source","destination","droppableId","console","log","list","startIndex","endIndex","Array","from","splice","removed","reorder","index","forceUpdate","droppableSource","droppableDestination","sourceClone","destClone","move","this","map","listitem","provided","snapshot","className","ref","innerRef","style","isDraggingOver","background","padding","width","margin","title","arr","sum","item","effort","sumEffort","key","draggableId","draggableProps","dragHandleProps","isDragging","draggableStyle","userSelect","grid","fontSize","textAlign","summary","description","epic","prio","placeholder","Component","subject","Subject","messageService","message","next","text","asObservable","React","csvSoJson","csv","lines","split","headers","i","length","obj","currentline","j","str","replace","push","jsonToCSV","json3","replacer","value","header","Object","keys","row","fieldName","JSON","stringify","join","unshift","getRandElement","number","Math","floor","random","storyAttributes","status","start","FileOpen","props","showFile","e","a","async","preventDefault","reader","FileReader","onload","target","readAsText","files","showRand","count","offset","v","k","version","getItems","render","type","onChange","onClick","App","subscription","flatlist","setJsonData","groups","groupItem","colIdx","indexOf","warn","subscribe","setCSVData","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.777f52f9.chunk.js","sourcesContent":["import React from \"react\";\n\nimport { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\n\n// a little function to help us with reordering the result\nconst reorder = (list, startIndex, endIndex) => {\n  const result = Array.from(list);\n  const [removed] = result.splice(startIndex, 1);\n  result.splice(endIndex, 0, removed);\n\n  return result;\n};\n\n/**\n * Moves an item from one list to another list.\n */\nconst move = (source, destination, droppableSource, droppableDestination) => {\n  const sourceClone = Array.from(source);\n  const destClone = Array.from(destination);\n  const [removed] = sourceClone.splice(droppableSource.index, 1);\n\n  destClone.splice(droppableDestination.index, 0, removed);\n\n  const result = {};\n  result[droppableSource.droppableId] = sourceClone;\n  result[droppableDestination.droppableId] = destClone;\n\n  return result;\n};\n\nconst grid = 4;\n\nconst getItemStyle = (isDragging, draggableStyle) => ({\n  // some basic styles to make the items look a bit nicer\n  userSelect: \"none\",\n  padding: grid * 2,\n  margin: `0 0 ${grid}px 0`,\n  fontSize: 14,\n  textAlign: \"left\",\n  // display: \"block\",\n\n  // change background colour if dragging\n  background: isDragging ? \"lightgreen\" : \"white\",\n\n  // styles we need to apply on draggables\n  ...draggableStyle\n});\n\nconst sumEffort = (arr) => {\n  let sum = 0\n  arr.map((item, index) => {\n    sum += +item.effort\n  })\n  return sum\n}\n\nconst getListStyle = isDraggingOver => ({\n  background: isDraggingOver ? \"lightblue\" : \"#F1F1F1\",\n  padding: grid,\n  width: 250,\n  margin: 4\n});\n\nclass Board extends Component {\n  constructor(probs) {\n    super(probs);\n    this.state = { lists: probs.list };\n  }\n\n  getList = id => {\n    return this.state.lists[+id].items;\n    // return // this.state[this.id2List[id]]\n  };\n\n  onDragEnd = result => {\n    const { source, destination } = result;\n\n    // dropped outside the list\n    if (!destination) {\n      return;\n    }\n\n    if (source.droppableId === destination.droppableId) {\n      // called when dragged within a list\n      console.log(\"reorder\");\n      const items = reorder(\n        this.getList(source.droppableId),\n        source.index,\n        destination.index\n      );\n\n      console.log(\"droppableId : \" + source.droppableId);\n      // console.log(items);\n\n      this.state.lists[+source.droppableId].items = items;\n      this.forceUpdate();\n    } else {\n      // called when dragged from list to list\n      console.log(\"Move\");\n\n      const result = move(\n        this.getList(source.droppableId),\n        this.getList(destination.droppableId),\n        source,\n        destination\n      );\n\n      console.log(result);\n\n      // map the fechted items to the state . list\n      // let val = {};\n      // val[this.id2List[source.droppableId]] = result[source.droppableId];\n      // val[this.id2List[destination.droppableId]] = result[destination.droppableId];\n      // console.log(val);\n      // this.setState(val);\n\n      this.state.lists[+source.droppableId].items = result[+source.droppableId];\n      this.state.lists[+destination.droppableId].items =\n        result[+destination.droppableId];\n      this.forceUpdate();\n    }\n  };\n\n  // Normally you would want to split things out into separate components.\n  // But in this example everything is just done in one place for simplicity\n  render() {\n    // {this.state.lists.map((listitem, index) => ({ listitem.title }))}\n\n    return (\n      <DragDropContext onDragEnd={this.onDragEnd}>\n        {this.state.lists.map((listitem, index) => (\n          <Droppable droppableId={\"\" + index}>\n            {(provided, snapshot) => (\n              <div\n                className=\"card\"\n                ref={provided.innerRef}\n                style={getListStyle(snapshot.isDraggingOver)}\n              >\n\n                <div className=\"row\">\n\n                  <div className=\"col-sm-9\">\n                    <b>\n                      {listitem.title}\n                    </b>\n                  </div>\n                  <div className=\"col-sm-3\">\n                    <span className=\"badge badge-dark pull-right\">\n                      {sumEffort( listitem.items ) }\n                    </span>\n                  </div>\n                </div>\n                <hr />\n\n                {listitem.items.map((item, index) => (\n                  <Draggable key={item.id} draggableId={item.id} index={index}>\n                    {(provided, snapshot) => (\n                      <div\n                        className=\"card\"\n                        ref={provided.innerRef}\n                        {...provided.draggableProps}\n                        {...provided.dragHandleProps}\n                        style={getItemStyle(\n                          snapshot.isDragging,\n                          provided.draggableProps.style\n                        )}\n                      >\n\n                        <div className=\"row\">\n\n                          <div className=\"col-sm-9\">{item.id}</div>\n                          <div className=\"col-sm-3\">\n                            <span className=\"badge badge-dark pull-right\">\n                              {item.effort}\n                            </span>\n                          </div>\n\n                        </div>\n                        <div className=\"row\">\n                          <div className=\"col-sm-12\"><b>{item.summary}</b></div>\n                        </div>\n\n\n                        <div className=\"row\">\n                          <div className=\"col-sm-12\">{item.description}</div>\n                        </div>\n                        <div className=\"row\">\n                          <div className=\"col-sm-9\">\n                            <span className=\"badge badge-primary pull-right\">\n                              {item.epic}\n                            </span>\n                          </div>\n                          <div className=\"col-sm-3\">\n                            <span className=\"badge {if(item.prio>7) ? 'badge-light' : 'badge-error' } pull-right\">\n                              {item.prio}\n                            </span>\n                          </div>\n                        </div>\n                      </div>\n\n                    )}\n                  </Draggable>\n                ))}\n                {provided.placeholder}\n              </div>\n            )}\n          </Droppable>\n        ))}\n      </DragDropContext>\n    );\n  }\n}\n\nexport default Board;\n","import { Subject } from 'rxjs';\r\n\r\nconst subject = new Subject();\r\n\r\nexport const messageService = {\r\n    sendMessage: message => subject.next({ text: message }),\r\n    clearMessages: () => subject.next(),\r\n    getMessage: () => subject.asObservable()\r\n};","import React from 'react';\r\n\r\nimport { messageService } from './messageService';\r\n\r\nclass HomePage extends React.Component {\r\n    sendMessage() {\r\n        // send message to subscribers via observable subject\r\n        messageService.sendMessage('Message from Home Page Component to App Component!');\r\n    }\r\n\r\n    clearMessages() {\r\n        // clear messages\r\n        messageService.clearMessages();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h2>React + RxJS Component Communication</h2>\r\n                <button onClick={this.sendMessage} className=\"btn btn-primary\">Send Message</button>\r\n                <button onClick={this.clearMessages} className=\"btn btn-secondary\">Clear Messages</button>     <hr />         \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport { HomePage };","import React from \"react\";\r\n// import { BrowserRouter as Router, Route } from 'react-router-dom';\r\n\r\nimport { messageService } from \"./messageService\";\r\n\r\nclass MessageReciever extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      messages: []\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    // subscribe to home component messages\r\n    this.subscription = messageService.getMessage().subscribe(message => {\r\n      if (message) {\r\n        // add message to local state if not empty\r\n        this.setState({ messages: [...this.state.messages, message] });\r\n      } else {\r\n        // clear messages when empty message received\r\n        this.setState({ messages: [] });\r\n      }\r\n    });\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    // unsubscribe to ensure no memory leaks\r\n    this.subscription.unsubscribe();\r\n  }\r\n\r\n  render() {\r\n    const { messages } = this.state;\r\n    return (\r\n      <div>\r\n        <div className=\"container text-center\">\r\n          <div className=\"row\">\r\n            <div className=\"col-sm-8 offset-sm-2\">\r\n              <h2>Message Reciever</h2>\r\n              {messages.map((message, index) => (\r\n                <div key={index} className=\"alert alert-success\">\r\n                  {message.text}\r\n                </div>\r\n              ))}\r\n              <hr />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport { MessageReciever };\r\n","export function csvSoJson(csv) {\n\n  var lines = csv.split(\"\\n\");\n\n  var result = [];\n\n  var headers = lines[0].split(\";\");\n\n  for (var i = 1; i < lines.length; i++) {\n    var obj = {};\n    var currentline = lines[i].split(\";\");\n\n    for (var j = 0; j < headers.length; j++) {\n      \n      const str = currentline[j].replace(/^\"(.*)\"$/, '$1');\n\n      obj[headers[j]] = str;\n    }\n\n    result.push(obj);\n  }\n\n  return result; //JavaScript object\n  // return JSON.stringify(result); //JSON\n}\n\nexport function jsonToCSV( json3 ) {\n  \n  const items = json3;\n  const replacer = (key, value) => (value === null ? \"\" : value); // specify how you want to handle null values here\n  const header = Object.keys(items[0]);\n  let csv = items.map(row =>\n    header.map(fieldName => JSON.stringify(row[fieldName], replacer)).join(\";\")\n  );\n  csv.unshift(header.join(\";\"));\n  return  csv.join(\"\\r\\n\");\n}\n","import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport Board from \"./Board\";\n\nimport { messageService } from \"./messageService\";\nimport { HomePage } from \"./HomePage\";\nimport { MessageReciever } from \"./MessageReciever\";\n\nimport { jsonToCSV, csvSoJson } from \"./csvToJson\";\n\n// import { groupBy,uniq,map } from 'underscore'\n\n// import { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\n// import { List, DatePicker, message } from \"antd\";\n\nconst getRandElement = arr => {\n  const number = Math.floor(Math.random() * Math.floor(arr.length));\n  console.log(number);\n  return arr[number];\n};\n\nconst storyAttributes = {\n  status: [\"Open\", \"Progress\", \"Verificatin\", \"Done\"],\n  epic: [\"epic1\", \"epic2\", \"epic3\", \"epic4\"],\n  prio: [\"0\", \"2\", \"5\", \"10\"],\n  start: [\"Q1\", \"Q2\", \"Q3\", \"Q4\"]\n};\n\n// fake data generator\nconst getItems = (count, offset = 0) =>\n  Array.from({ length: count }, (v, k) => k).map(k => ({\n    id: `JIRA-${k + offset}`,\n    summary: `Item to  ${k + offset}`,\n    description: `As user i want ${k + offset}, so that ...`,\n    effort: 3,\n    epic: \"\" + getRandElement(storyAttributes.epic),\n    version: \"v\" + getRandElement([\"1.0\", \"1.1\", \"2.0\"]),\n    prio: \"\" + getRandElement(storyAttributes.prio),\n    status: \"\" + getRandElement(storyAttributes.status),\n    start: \"\" + getRandElement(storyAttributes.start)\n  }));\n\nfunction testCSV(jsonInput) {\n  console.log(\"Print flatlist\");\n  console.log(jsonInput);\n\n  const csv = jsonToCSV(jsonInput);\n\n  console.log(\"Print csv\");\n  console.log(csv);\n\n  const json2 = csvSoJson(csv);\n\n  console.log(\"Print json\");\n  console.log(json2);\n\n  const csv2 = jsonToCSV(json2);\n\n  console.log(\"Print csv\");\n  console.log(csv2);\n}\n\nclass FileOpen extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  showFile = async e => {\n    e.preventDefault();\n    const reader = new FileReader();\n    reader.onload = async e => {\n      const text = e.target.result;\n\n      console.log(\"showFile\");\n      console.log(text);\n      // alert(text);\n      messageService.sendMessage(text);\n    };\n    reader.readAsText(e.target.files[0]);\n  };\n\n  showRand = () => {\n\n    const flatlist = getItems(10);\n    // this.setJsonData(flatlist);\n\n    // this.lists = [\n    //   {\n    //     title: \"Open\",\n    //     items: getItems(10)\n    //   },\n    //   { ... }\n    // ]; // lists    \n\n    const csv = jsonToCSV(flatlist);\n    console.log( csv )\n    messageService.sendMessage(csv);\n  };\n\n\n  render = () => {\n    return (\n      <div>\n        <input type=\"file\" onChange={e => this.showFile(e)} />\n        <button onClick={ this.showRand } > Simulate </button>\n      </div>\n\n    );\n  };\n}\n\nclass App extends Component {\n  constructor(probs) {\n    super(probs);\n\n    this.state = {\n      lists: []\n    };\n    this.subscription = null;\n  }\n\n  setCSVData(csv) {\n    console.log(\"setCSVData\")\n    console.log(csv)\n    const flatlist = csvSoJson(csv);\n\n    console.log(\"setJsonData\")\n    console.log(flatlist)\n\n    this.setJsonData(flatlist);\n  }\n\n  setJsonData(flatlist) {\n\n    // this.state.lists = []\n\n    \n    const groupBy = \"status\";\n    // const groupedList = groupBy( flatlist, groupBy )\n    const groups = storyAttributes[groupBy];\n    // create groups / colums\n    groups.map((item, index) => {\n      this.state.lists.push({ title: item, items: [] });\n    });\n    // add items to the columns\n    flatlist.map((listitem, index) => {\n      const groupItem = listitem[groupBy];\n      const colIdx = groups.indexOf(groupItem);\n      // push items to the correct column\n      if (colIdx >= 0) {\n        this.state.lists[colIdx].items.push(listitem);\n      } else {\n        console.warn(\"Item Ignored\");\n        console.warn(listitem);\n      }\n    });\n\n    this.forceUpdate();\n  }\n\n  componentDidMount() {\n    // subscribe to home component messages\n    this.subscription = messageService.getMessage().subscribe(message => {\n      if (message) {\n        // add message to local state if not empty\n\n        console.log(\"componentDidMount recieved message\");\n        console.log(message);\n\n        this.setCSVData(message.text)\n        // this.setState({ messages: [...this.state.messages, message] });\n      } else {\n        // clear messages when empty message received\n        // this.setState({ messages: [] });\n      }\n    });\n  }\n\n  render() {\n    // <HomePage />\n    // <MessageReciever />\n    // \n\n    return (\n      <div>\n        <FileOpen />\n        <div className=\"container text-center\">\n          <div className=\"row\">\n            <Board list={this.state.lists} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\n// Put the things into the DOM!\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}